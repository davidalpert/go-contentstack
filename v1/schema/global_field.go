package schema

import (
	"fmt"
	"strings"
)

// Generated by https://quicktype.io

type GlobalField struct {
	CreatedAt    string  `json:"created_at"`
	UpdatedAt    string  `json:"updated_at"`
	Title        string  `json:"title"`
	UID          string  `json:"uid"`
	Version      *int64  `json:"_version,omitempty"`
	InbuiltClass *bool   `json:"inbuilt_class,omitempty"`
	Schema       []Field `json:"schema"`

	MaintainRevisions bool          `json:"maintain_revisions"`
	Description       string        `json:"description"`
	LastActivity      *LastActivity `json:"last_activity,omitempty"`
}

type Field struct {
	DataType       string         `json:"data_type"`
	DisplayName    string         `json:"display_name"`
	Uid            string         `json:"uid"`
	FieldMetadata  FieldMetadata  `json:"field_metadata"`
	Format         *string        `json:"format,omitempty"`
	ErrorMessages  *ErrorMessages `json:"error_messages,omitempty"`
	Mandatory      bool           `json:"mandatory"`
	Multiple       bool           `json:"multiple"`
	NonLocalizable *bool          `json:"non_localizable,omitempty"`
	Unique         *bool          `json:"unique,omitempty"`
	Indexed        *bool          `json:"indexed,omitempty"`
	InbuiltModel   *bool          `json:"inbuilt_model,omitempty"`
	Blocks         []BlockSet     `json:"blocks,omitempty"`
	ReferenceTo    StrArray       `json:"reference_to,omitempty"`
	DisplayType    *string        `json:"display_type,omitempty"`
	Enum           *EnumField     `json:"enum,omitempty"`
}

// BlockSet is a way to group fields
type BlockSet struct {
	Title  string  `json:"title"`
	Uid    string  `json:"uid"`
	Schema []Field `json:"schema"`
}

type EnumField struct {
	Advanced bool     `json:"advanced"`
	Choices  []Choice `json:"choices"`
}

type Choice struct {
	Value string `json:"value"`
}

type ErrorMessages struct {
	Format string `json:"format"`
}

type FieldMetadata struct {
	Description  string      `json:"description"`
	Default      *bool       `json:"_default,omitempty"`
	DefaultValue interface{} `json:"default_value,omitempty"`
	Instruction  *string     `json:"instruction,omitempty"`
	Version      *int64      `json:"version,omitempty"`
}

func (f FieldMetadata) IsDefaultValue() bool {
	if f.DefaultValue == nil {
		return false
	}

	switch v := f.DefaultValue.(type) {
	case string:
		return strings.EqualFold("true", v)
	case bool:
		return v
	default:
		panic(fmt.Sprintf("can't determine whether %#v means this is a default value or not", f.DefaultValue))
	}
}
