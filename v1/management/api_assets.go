/*
Contentstack Content Delivery API OpenAPI Specification

<p>The Content Delivery API (CDA), available at cdn.contentstack.com, is a read-only API used to retrieve content from your Contentstack account and deliver it to your web or mobile properties. Contentstack provides an OpenAPI JSON file that consists of a set of preconfigured REST API requests that will make it easy for you to get started with the Contentstack Delivery APIs and try out our API requests through the Swagger Editor. </p><p>Here are the details of the important information key used in this file: </p><table border=\"1\"> <tbody> <tr>  <td>Key  </td>  <td>Value  </td> </tr> <tr>  <td>Base URL  </td>  <td>   <ul>    <li>North America: https://cdn.contentstack.io/</li>    <li>Europe: https://eu-cdn.contentstack.com/</li>   </ul>  </td> </tr> <tr>  <td>api_key  </td>  <td>   <ul>    <li>North America:&nbsp;blt02f7b45378b008ee</li>    <li>Europe:&nbsp;bltd88b56bcda5594d5</li>   </ul>  </td> </tr> <tr>  <td>access_token  </td>  <td>   <ul>    <li>North America:&nbsp;cs5b69faf35efdebd91d08bcf4</li>    <li>Europe:&nbsp;cs408c732861b2aa495971ae51</li>   </ul>  </td> </tr> <tr>  <td> environment  </td>  <td>   <ul>    <li>North America:&nbsp;production</li>    <li>Europe:&nbsp;production</li>   </ul>  </td> </tr> </tbody> </table><p><strong>CDA OpenAPI Details:</strong> </p><ul>  <li>Version: 2.0.2</li>  <li>Last Updated: April 12, 2022</li> </ul>

API version: 2.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AssetsApiService AssetsApi service
type AssetsApiService service

type ApiGetallassetsRequest struct {
	ctx context.Context
	ApiService *AssetsApiService
	includeFallback *string
	relativeUrls *string
	includeDimension *string
	includeBranch *string
}

// Enter &#39;true&#39; to include the published asset details from the fallback locale when the specified locale does not contain published content.
func (r ApiGetallassetsRequest) IncludeFallback(includeFallback string) ApiGetallassetsRequest {
	r.includeFallback = &includeFallback
	return r
}

// Enter &#39;true&#39; to include the relative URLs of the assets in the response.
func (r ApiGetallassetsRequest) RelativeUrls(relativeUrls string) ApiGetallassetsRequest {
	r.relativeUrls = &relativeUrls
	return r
}

// Enter &#39;true&#39; to include the dimensions (height and width) of the image in the response. Supported image types: JPG, GIF, PNG, WebP, BMP, TIFF, SVG, and PSD.
func (r ApiGetallassetsRequest) IncludeDimension(includeDimension string) ApiGetallassetsRequest {
	r.includeDimension = &includeDimension
	return r
}

// Set this to true to include the _branch top-level key in the response. This key states the unique ID of the branch where the concerned Contentstack module resides.
func (r ApiGetallassetsRequest) IncludeBranch(includeBranch string) ApiGetallassetsRequest {
	r.includeBranch = &includeBranch
	return r
}

func (r ApiGetallassetsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetallassetsExecute(r)
}

/*
Getallassets Get all assets

<p>The <code>Get all assets</code> request fetches the list of all the assets of a particular stack. It returns the content of each asset in JSON format. You can also specify the environment of which you want to get the assets.</p><p>To use the API Request, you'll need to use the <a href="https://www.contentstack.com/docs/developers/create-tokens/about-delivery-tokens">Delivery Token</a> of the respective environment.<br>Read more about it in <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/#authentication">Authentication</a>.
</p><p>For more information, refer to the <a target=_blank href=https://www.contentstack.com/docs/developers/apis/content-delivery-api/#get-all-assets>All Assets</a> API Reference document</p><p><strong>Note</strong>: The parameter values present here correspond to the AWS North America Region. To find the values corresponding to other regions, please refer to the <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/">Content Delivery API</a> doc.<strong></strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetallassetsRequest
*/
func (a *AssetsApiService) Getallassets(ctx context.Context) ApiGetallassetsRequest {
	return ApiGetallassetsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AssetsApiService) GetallassetsExecute(r ApiGetallassetsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetsApiService.Getallassets")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeFallback != nil {
		parameterAddToQuery(localVarQueryParams, "include_fallback", r.includeFallback, "")
	}
	if r.relativeUrls != nil {
		parameterAddToQuery(localVarQueryParams, "relative_urls", r.relativeUrls, "")
	}
	if r.includeDimension != nil {
		parameterAddToQuery(localVarQueryParams, "include_dimension", r.includeDimension, "")
	}
	if r.includeBranch != nil {
		parameterAddToQuery(localVarQueryParams, "include_branch", r.includeBranch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["access_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["access_token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api_key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["environment"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("environment", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetasingleassetRequest struct {
	ctx context.Context
	ApiService *AssetsApiService
	assetUid string
	version *string
	includeFallback *string
	includeDimension *string
	relativeUrls *string
	includeBranch *string
}

// Specify the version number of the asset that you want to retrieve. To retrieve a specific version, keep the environment parameter blank.&amp;nbsp;If the version is not specified, the details of the latest version will be retrieved.
func (r ApiGetasingleassetRequest) Version(version string) ApiGetasingleassetRequest {
	r.version = &version
	return r
}

// Enter &#39;true&#39; to include published asset details from the fallback locale when the specified locale does not contain published information.
func (r ApiGetasingleassetRequest) IncludeFallback(includeFallback string) ApiGetasingleassetRequest {
	r.includeFallback = &includeFallback
	return r
}

// Enter &#39;true&#39; to include the dimensions (height and width)&amp;nbsp;of the image&amp;nbsp;in the response.&amp;nbsp;Supported image&amp;nbsp;types: JPG, GIF, PNG, WebP, BMP, TIFF, SVG, and PSD.
func (r ApiGetasingleassetRequest) IncludeDimension(includeDimension string) ApiGetasingleassetRequest {
	r.includeDimension = &includeDimension
	return r
}

// Enter &#39;true&#39; to include the relative URL of the asset in the response.
func (r ApiGetasingleassetRequest) RelativeUrls(relativeUrls string) ApiGetasingleassetRequest {
	r.relativeUrls = &relativeUrls
	return r
}

// Set this to true to include the _branch top-level key in the response. This key states the unique ID of the branch where the concerned Contentstack module resides.
func (r ApiGetasingleassetRequest) IncludeBranch(includeBranch string) ApiGetasingleassetRequest {
	r.includeBranch = &includeBranch
	return r
}

func (r ApiGetasingleassetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetasingleassetExecute(r)
}

/*
Getasingleasset Get a single asset

<p>The <code>Get a single asset</code> request fetches the latest version of a specific asset of a particular stack.</p><p>To use the API Request, you'll need to use the <a href="https://www.contentstack.com/docs/developers/create-tokens/about-delivery-tokens">Delivery Token</a> of the respective environment.<br>Read more about it in <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/#authentication">Authentication</a>.
</p><p>For more information, refer to the <a target=_blank href=https://www.contentstack.com/docs/developers/apis/content-delivery-api/#get-a-single-asset>Single Asset</a> API Reference document</p><p><strong>Note</strong>: The parameter values present here correspond to the AWS North America Region. To find the values corresponding to other regions, please refer to the <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/">Content Delivery API</a> doc.<strong></strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetUid
 @return ApiGetasingleassetRequest
*/
func (a *AssetsApiService) Getasingleasset(ctx context.Context, assetUid string) ApiGetasingleassetRequest {
	return ApiGetasingleassetRequest{
		ApiService: a,
		ctx: ctx,
		assetUid: assetUid,
	}
}

// Execute executes the request
func (a *AssetsApiService) GetasingleassetExecute(r ApiGetasingleassetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetsApiService.Getasingleasset")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/assets/{asset_uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"asset_uid"+"}", url.PathEscape(parameterValueToString(r.assetUid, "assetUid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.version != nil {
		parameterAddToQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.includeFallback != nil {
		parameterAddToQuery(localVarQueryParams, "include_fallback", r.includeFallback, "")
	}
	if r.includeDimension != nil {
		parameterAddToQuery(localVarQueryParams, "include_dimension", r.includeDimension, "")
	}
	if r.relativeUrls != nil {
		parameterAddToQuery(localVarQueryParams, "relative_urls", r.relativeUrls, "")
	}
	if r.includeBranch != nil {
		parameterAddToQuery(localVarQueryParams, "include_branch", r.includeBranch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["access_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["access_token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api_key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["environment"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("environment", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
