/*
Contentstack Content Delivery API OpenAPI Specification

<p>The Content Delivery API (CDA), available at cdn.contentstack.com, is a read-only API used to retrieve content from your Contentstack account and deliver it to your web or mobile properties. Contentstack provides an OpenAPI JSON file that consists of a set of preconfigured REST API requests that will make it easy for you to get started with the Contentstack Delivery APIs and try out our API requests through the Swagger Editor. </p><p>Here are the details of the important information key used in this file: </p><table border=\"1\"> <tbody> <tr>  <td>Key  </td>  <td>Value  </td> </tr> <tr>  <td>Base URL  </td>  <td>   <ul>    <li>North America: https://cdn.contentstack.io/</li>    <li>Europe: https://eu-cdn.contentstack.com/</li>   </ul>  </td> </tr> <tr>  <td>api_key  </td>  <td>   <ul>    <li>North America:&nbsp;blt02f7b45378b008ee</li>    <li>Europe:&nbsp;bltd88b56bcda5594d5</li>   </ul>  </td> </tr> <tr>  <td>access_token  </td>  <td>   <ul>    <li>North America:&nbsp;cs5b69faf35efdebd91d08bcf4</li>    <li>Europe:&nbsp;cs408c732861b2aa495971ae51</li>   </ul>  </td> </tr> <tr>  <td> environment  </td>  <td>   <ul>    <li>North America:&nbsp;production</li>    <li>Europe:&nbsp;production</li>   </ul>  </td> </tr> </tbody> </table><p><strong>CDA OpenAPI Details:</strong> </p><ul>  <li>Version: 2.0.2</li>  <li>Last Updated: April 12, 2022</li> </ul>

API version: 2.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ContentTypesApiService ContentTypesApi service
type ContentTypesApiService service

type ApiGetallcontenttypesRequest struct {
	ctx context.Context
	ApiService *ContentTypesApiService
	includeCount *string
	includeBranch *string
}

// Set this to &#39;true&#39; to include in response the total count of content types available in your stack.
func (r ApiGetallcontenttypesRequest) IncludeCount(includeCount string) ApiGetallcontenttypesRequest {
	r.includeCount = &includeCount
	return r
}

// Set this to true to include the _branch top-level key in the response. This key states the unique ID of the branch where the concerned Contentstack module resides.
func (r ApiGetallcontenttypesRequest) IncludeBranch(includeBranch string) ApiGetallcontenttypesRequest {
	r.includeBranch = &includeBranch
	return r
}

func (r ApiGetallcontenttypesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetallcontenttypesExecute(r)
}

/*
Getallcontenttypes Get all content types

<p>The <code>Get all content types</code> call returns comprehensive information of all the content types available in a particular stack in your account.</p><p>To use the API Request, you'll need to use the <a href="https://www.contentstack.com/docs/developers/create-tokens/about-delivery-tokens">Delivery Token</a> of the respective environment.<br>Read more about it in <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/#authentication">Authentication</a>.
</p><p>For more information, refer to the <a target=_blank href=https://www.contentstack.com/docs/developers/apis/content-delivery-api/#get-all-content-types>All Content Types</a> API Reference document</p><p><strong>Note</strong>: The parameter values present here correspond to the AWS North America Region. To find the values corresponding to other regions, please refer to the <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/">Content Delivery API</a> doc.<strong></strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetallcontenttypesRequest
*/
func (a *ContentTypesApiService) Getallcontenttypes(ctx context.Context) ApiGetallcontenttypesRequest {
	return ApiGetallcontenttypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ContentTypesApiService) GetallcontenttypesExecute(r ApiGetallcontenttypesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentTypesApiService.Getallcontenttypes")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/content_types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.includeCount == nil {
		return nil, reportError("includeCount is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "include_count", r.includeCount, "")
	if r.includeBranch != nil {
		parameterAddToQuery(localVarQueryParams, "include_branch", r.includeBranch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["access_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["access_token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api_key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetasinglecontenttypeRequest struct {
	ctx context.Context
	ApiService *ContentTypesApiService
	contentTypeUid string
	includeBranch *string
}

// Set this to true to include the _branch top-level key in the response. This key states the unique ID of the branch where the concerned Contentstack module resides.
func (r ApiGetasinglecontenttypeRequest) IncludeBranch(includeBranch string) ApiGetasinglecontenttypeRequest {
	r.includeBranch = &includeBranch
	return r
}

func (r ApiGetasinglecontenttypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetasinglecontenttypeExecute(r)
}

/*
Getasinglecontenttype Get a single content type

<p>This call returns information of a specific content type. It returns the content type schema, but does not include its entries.</p><p>To use the API Request, you'll need to use the <a href="https://www.contentstack.com/docs/developers/create-tokens/about-delivery-tokens">Delivery Token</a> of the respective environment.<br>Read more about it in <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/#authentication">Authentication</a>.
</p><p>For more information, refer to the <a target=_blank href=https://www.contentstack.com/docs/developers/apis/content-delivery-api/#get-a-single-content-type>Single Content Type</a> API Reference document</p><p><strong>Note</strong>: The parameter values present here correspond to the AWS North America Region. To find the values corresponding to other regions, please refer to the <a href="https://www.contentstack.com/docs/developers/apis/content-delivery-api/">Content Delivery API</a> doc.<strong></strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentTypeUid
 @return ApiGetasinglecontenttypeRequest
*/
func (a *ContentTypesApiService) Getasinglecontenttype(ctx context.Context, contentTypeUid string) ApiGetasinglecontenttypeRequest {
	return ApiGetasinglecontenttypeRequest{
		ApiService: a,
		ctx: ctx,
		contentTypeUid: contentTypeUid,
	}
}

// Execute executes the request
func (a *ContentTypesApiService) GetasinglecontenttypeExecute(r ApiGetasinglecontenttypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentTypesApiService.Getasinglecontenttype")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/content_types/{content_type_uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"content_type_uid"+"}", url.PathEscape(parameterValueToString(r.contentTypeUid, "contentTypeUid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeBranch != nil {
		parameterAddToQuery(localVarQueryParams, "include_branch", r.includeBranch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["access_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["access_token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api_key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
